<?php

namespace frontend\controllers;

use common\models\Appeal;
use common\models\AppealControl;
use common\models\AppealQuestionGroup;
use common\models\AppealRegister;
use common\models\Company;
use common\models\AppealShakl;
use common\models\search\ReportSearch;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\filters\VerbFilter;
use Yii;

class ReportController extends Controller
{
    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            header('Location: ' . Yii::$app->urlManager->createUrl(['/site/login']));
            exit;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],

                    ],

                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    public function actionIndex()
    {

        $searchModel = new ReportSearch();
        $dataProvider = $searchModel->searchLeader(Yii::$app->request->queryParams);


        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionIndex2()
    {
        $user = \Yii::$app->user->identity;
        $quest = AppealQuestionGroup::find()->all();
        $cc = AppealRegister::find()->Where(['company_id' => $user->company_id])->all();
        $arr = AppealRegister::find()->Where(['company_id' => $user->company_id])->all();

        $user = \Yii::$app->user->identity;
        $type = AppealQuestionGroup::find()->all();
        $tp = [];
        $shakl = AppealShakl::find()->all();
        foreach ($type as $item){
            $tp[$item->id]['jami'] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                ->where(['appeal_register.company_id'=>$user->company_id])
                ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')
                ->count('*');

            foreach ($shakl as $i){
                $tp[$item->id]['shakl'][$i->id] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                    ->where(['appeal_register.company_id'=>$user->company_id])
                    ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')
                    ->andWhere(['appeal.appeal_shakl_id'=>$i->id])
                    ->count('*');
            }
            $tp[$item->id]['nazorat']=AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                ->where(['appeal_register.company_id'=>$user->company_id])
                ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')->andWhere(['appeal_register.nazorat'=>1])
                ->count('*');
            foreach (AppealControl::find()->all() as $i){
                $tp[$item->id]['control'][$i->id] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                    ->where(['appeal_register.company_id'=>$user->company_id])
                    ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')->andWhere(['appeal_register.control_id'=>$i->id])
                    ->count('*');
            }
            $tp[$item->id]['dead'] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                ->where(['appeal_register.company_id'=>$user->company_id])
                ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')
                ->andWhere('appeal_register.status = 2 and appeal_register.deadtime<date(now())')
                ->count('*');


            $tp[$item->id]['dead_done'] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                ->where(['appeal_register.company_id'=>$user->company_id])
                ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')->andWhere('appeal_register.status = 4 and appeal_register.deadtime<appeal_register.donetime')
                ->count('*');
        }

        // $modelga period yozib yuklab olinadi va shu perioddagi murojaatlar ekranga chiqariladi.
        $model = new Appeal();


        if (Yii::$app->request->isPost) {

            $spreadsheet = new Spreadsheet();
            $sheet = $spreadsheet->getActiveSheet();
            $n = 0;
            $m = 2;
            $time = new \DateTime('now');

            $sheet->setCellValue('A1', '№');
            $sheet->setCellValue('B1', 'Мурожаатларда кўтарилан масалалар	');
            $sheet->setCellValue('C1', 'Жами мурожаатлар сони	');
            $sheet->setCellValue('D1', 'Мурожаатларни шакллари	');
            $sheet->setCellValue('N1', '2023 йил бўйича мурожаатларни  кўриб чиқиш ҳолатлари');
            $sheet->setCellValue('D2', 'Ёзма');
            $sheet->setCellValue('E2', 'Хат');
            $sheet->setCellValue('F2', 'Оғзаки (Қабул)	');
            $sheet->setCellValue('G2', 'Электрон');
            $sheet->setCellValue('H2', 'Сайёр қабул');
            $sheet->setCellValue('I2', 'Ишонч телефони	');
            $sheet->setCellValue('J2', 'МФЙ орқали	');
            $sheet->setCellValue('K2', 'Веб сайт');
            $sheet->setCellValue('L2', 'Президент портали');
            $sheet->setCellValue('M2', 'Прокуратура');
            $sheet->setCellValue('N2', 'Назоратга олинганлар');
            $sheet->setCellValue('O2', 'чоралар  кўрилди');
            $sheet->setCellValue('P2', 'тушунтирилди');
            $sheet->setCellValue('Q2', 'рад этилди	');
            $sheet->setCellValue('R2', 'кўриб чиқилмоқда');
            $sheet->setCellValue('S2', 'такрорийлар');
            $sheet->setCellValue('T2', 'такрорийлар');


            $spreadsheet->getActiveSheet()->getStyle("A1:T" . $m)->getBorders()->getAllBorders()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setHorizontal('center');
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setVertical('center');
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setWrapText(true);
            $spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            $spreadsheet->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);


            $sheet->mergeCells('A1:A2');
            $sheet->mergeCells('B1:B2');
            $sheet->mergeCells('C1:C2');
            $sheet->mergeCells('D1:M1');
            $sheet->mergeCells('N1:T1');
            $writer = new Xlsx($spreadsheet);
//            $writer->save("php://output");

            $writer->save('tashkilotlar.xlsx');
            Yii::$app->response->sendFile('tashkilotlar.xlsx');
        }

        return $this->render('index2', [
            'quest' => $quest,
            'cc' => $cc,
            'arr' => $arr,
            'tp'=>$tp,
        ]);
    }

    public function actionIndex3()
    {
        $user = \Yii::$app->user->identity;
        $time = new \DateTime('now');

        $quest = Company::find()
            ->select(['company.*',
                '(select count(appeal_register.id) from appeal_register where appeal_register.company_id = company.id) as jami',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 1) as shakl1',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 2) as shakl2',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 3) as shakl3',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 4) as shakl4',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 5) as shakl5',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 6) as shakl6',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 7) as shakl7',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 8) as shakl8',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 9) as shakl9',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 10) as shakl10',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal.appeal_shakl_id = 10) as shakl11',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.control_id IN (0,1,2,3,4,5)) as nazoratda',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.control_id IN (2,3) ) as chora',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.control_id=4 ) as tushin',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.control_id=5 ) as rad',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.control_id IN (0,1) ) as kor',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.takroriy=1 ) as tak',
                '(select count(appeal_register.id) from appeal_register inner join appeal on appeal_register.appeal_id = appeal.id where appeal_register.company_id = company.id and appeal_register.deadtime < ' . $time->format('Y-m-d') . ' ) as date',
            ])
            ->where(['parent_id' => $user->company_id])
            ->all();
        $cc = Appeal::find()->all();
        $arr = AppealRegister::find()->all();
        $model = new AppealRegister();
        if (Yii::$app->request->isPost) {

            $spreadsheet = new Spreadsheet();
            $sheet = $spreadsheet->getActiveSheet();
            $n = 0;
            $m = 2;
            $time = new \DateTime('now');

            $sheet->setCellValue('A1', '№');
            $sheet->setCellValue('B1', 'Мурожаатларда кўтарилан масалалар	');
            $sheet->setCellValue('C1', 'Жами мурожаатлар сони	');
            $sheet->setCellValue('D1', 'Мурожаатларни шакллари	');
            $sheet->setCellValue('N1', '2023 йил бўйича мурожаатларни  кўриб чиқиш ҳолатлари');
            $sheet->setCellValue('D2', 'Ёзма');
            $sheet->setCellValue('E2', 'Хат');
            $sheet->setCellValue('F2', 'Оғзаки (Қабул)	');
            $sheet->setCellValue('G2', 'Электрон');
            $sheet->setCellValue('H2', 'Сайёр қабул');
            $sheet->setCellValue('I2', 'Ишонч телефони	');
            $sheet->setCellValue('J2', 'МФЙ орқали	');
            $sheet->setCellValue('K2', 'Веб сайт');
            $sheet->setCellValue('L2', 'Президент портали');
            $sheet->setCellValue('M2', 'Прокуратура');
            $sheet->setCellValue('N2', 'Назоратга олинганлар');
            $sheet->setCellValue('O2', 'чоралар  кўрилди');
            $sheet->setCellValue('P2', 'тушунтирилди');
            $sheet->setCellValue('Q2', 'рад этилди	');
            $sheet->setCellValue('R2', 'кўриб чиқилмоқда');
            $sheet->setCellValue('S2', 'такрорийлар');
            $sheet->setCellValue('T2', 'муддати бузилганлар');
            foreach ($quest as $item) {

                $n++;
                $m++;
                $aa = 0;
                $at = 0;
                $ax = 0;
                $ao = 0;
                $ae = 0;
                $as = 0;
                $ai = 0;
                $am = 0;
                $av = 0;
                $apr = 0;
                $ap = 0;
                $ab = 0;
                $ach = 0;
                $ar = 0;
                $ak = 0;
                $ata = 0;
                $ama = 0;
                $sheet->setCellValue('A' . $m, $n);
                $sheet->setCellValue('B' . $m, $item->name);


                $sheet->setCellValue('C' . $m, $item->jami);
                $sheet->setCellValue('D' . $m, $item->shakl1);
                $sheet->setCellValue('E' . $m, $item->shakl2);
                $sheet->setCellValue('F' . $m, $item->shakl3);
                $sheet->setCellValue('G' . $m, $item->shakl4);
                $sheet->setCellValue('H' . $m, $item->shakl5);
                $sheet->setCellValue('I' . $m, $item->shakl6);
                $sheet->setCellValue('J' . $m, $item->shakl7);
                $sheet->setCellValue('K' . $m, $item->shakl8);
                $sheet->setCellValue('L' . $m, $item->shakl9);
                $sheet->setCellValue('M' . $m, $item->shakl10);
                $sheet->setCellValue('N' . $m, $item->nazoratda);
                $sheet->setCellValue('O' . $m, $item->chora);
                $sheet->setCellValue('P' . $m, $item->tushin);
                $sheet->setCellValue('Q' . $m, $item->rad);
                $sheet->setCellValue('R' . $m, $item->kor);
                $sheet->setCellValue('S' . $m, $item->tak);
                $sheet->setCellValue('T' . $m, $item->date);
            }
            $spreadsheet->getActiveSheet()->getStyle("A1:T" . $m)->getBorders()->getAllBorders()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setHorizontal('center');
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setVertical('center');
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setWrapText(true);
            $spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            $sheet->mergeCells('A1:A2');
            $sheet->mergeCells('B1:B2');
            $sheet->mergeCells('C1:C2');
            $sheet->mergeCells('D1:M1');
            $sheet->mergeCells('N1:T1');
            $writer = new Xlsx($spreadsheet);
//            $writer->save("php://output");

            $writer->save('quyi tashkilotlar.xlsx');
            Yii::$app->response->sendFile('quyi tashkilotlar.xlsx');
        }

        return $this->render('index3', [
            'quest' => $quest,
            'cc' => $cc,
            'arr' => $arr
        ]);
    }

    public function actionIndex4()
    {
        $user = \Yii::$app->user->identity;
        $type = AppealQuestionGroup::find()->all();
        $tp = [];
        $shakl = AppealShakl::find()->all();
        foreach ($type as $item){
            $tp[$item->id]['jami'] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                ->where(['appeal_register.company_id'=>$user->company_id])
                ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')
                ->count('*');
            foreach ($shakl as $i){
                $tp[$item->id]['shakl'][$i->id] = AppealRegister::find()->select(['appeal.*'])->innerJoin('appeal','appeal.id = appeal_register.appeal_id')
                    ->where(['appeal_register.company_id'=>$user->company_id])
                    ->andWhere('appeal.question_id in (select id from appeal_question where group_id = '.$item->id.')')
                    ->andWhere(['appeal.appeal_shakl_id'=>$i->id])
                    ->count('*');
            }
        }
        $ap = AppealRegister::find()->where(['company_id' => $user->company_id])->all();
        if (Yii::$app->request->isPost) {

            $spreadsheet = new Spreadsheet();
            $sheet = $spreadsheet->getActiveSheet();
            $n = 0;
            $m = 2;
            $time = new \DateTime('now');

            $sheet->setCellValue('A1', '№');
            $sheet->setCellValue('B1', 'Мурожаатларда кўтарилан масалалар	');
            $sheet->setCellValue('C1', 'Жами мурожаатлар сони	');
            $sheet->setCellValue('D1', 'Мурожаатларни шакллари	');
            $letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            $tt = 2;
            foreach ($shakl as $i){
                $tt++;
                $sheet->setCellValue($letter[$tt] . $m,$i->name);
            }
            foreach ($type as $item) {

                $n++;
                $m++;

                $sheet->setCellValue('A' . $m, $n);
                $sheet->setCellValue('B' . $m, $item->name);
                $sheet->setCellValue('C' . $m, $tp[$item->id]['jami']);
                $tt = 2;
                foreach ($shakl as $i){
                    $tt ++;
                    $sheet->setCellValue($letter[$tt] . $m, $tp[$item->id]['shakl'][$i->id]);
                }
            }
            $spreadsheet->getActiveSheet()->getStyle("A1:M" . $m)->getBorders()->getAllBorders()->setBorderStyle(\PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN);
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setHorizontal('center');
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setVertical('center');
            $spreadsheet->getActiveSheet()->getStyle("A1:AN" . $m)->getAlignment()->setWrapText(true);
            $spreadsheet->getActiveSheet()->getColumnDimension('B')->setAutoSize(true);
            $spreadsheet->getActiveSheet()->getColumnDimension('C')->setAutoSize(true);


            $sheet->mergeCells('A1:A2');
            $sheet->mergeCells('B1:B2');
            $sheet->mergeCells('C1:C2');
            $sheet->mergeCells('D1:M1');
            $sheet->mergeCells('N1:T1');
            $writer = new Xlsx($spreadsheet);
//            $writer->save("php://output");

            $writer->save('tashkilotlar.xlsx');
            Yii::$app->response->sendFile('tashkilotlar.xlsx');
        }
            return $this->render('index4', [
                'type' => $type,
                'ap' => $ap,
                'tp'=>$tp
            ]);

        }


}
